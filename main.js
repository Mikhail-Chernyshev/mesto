(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var t=function(){function t(e,n,o,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._config=e,this._name=n,this._link=o,this._template=document.querySelector(i),this._handleCardClick=r}var n,o;return n=t,(o=[{key:"_getTemplate",value:function(){return this._template.content.querySelector(".element").cloneNode(!0)}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._deleteButton=this._element.querySelector(this._config.cardButtonDelete),this._likeButton=this._element.querySelector(this._config.cardButtonLike),this._cardImage=this._element.querySelector(".element__image"),this._setEventListeners(),this._cardImage.src=this._link,this._cardImage.alt=this._link,this._element.querySelector(".element__title").textContent=this._name,this._element}},{key:"getElement",value:function(){return this._element}},{key:"_likeCard",value:function(e){this._likeButton.classList.toggle(this._config.cardButtonLikeActive)}},{key:"_deleteCard",value:function(e){this._element.remove()}},{key:"_setEventListeners",value:function(){var e=this;this._deleteButton.addEventListener("click",(function(t){e._deleteCard(t)})),this._likeButton.addEventListener("click",(function(t){e._likeCard(t)})),this._cardImage.addEventListener("click",(function(){e._handleCardClick(e._name,e._link)}))}}])&&e(n.prototype,o),Object.defineProperty(n,"prototype",{writable:!1}),t}();const n=t;function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._config=t,this._form=n,this._formButton=this._form.querySelector(this._config.submitButtonSelector),this._inputList=Array.from(this._form.querySelectorAll(this._config.inputSelector))}var t,n;return t=e,(n=[{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showError(e,e.validationMessage)}},{key:"_showError",value:function(e,t){var n=this._form.querySelector(".".concat(e.id,"-error"));e.classList.add(this._config.inputErrorClass),n.textContent=t,n.classList.add(this._config.errorClass)}},{key:"_hideInputError",value:function(e){var t=this._form.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._config.inputErrorClass),t.classList.remove(this._config.errorClass),t.textContent=""}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput(this._inputList)?this._formButton.disabled=!0:this._formButton.disabled=!1}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_setEventListeners",value:function(){var e=this;this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._toggleButtonState(),e._checkInputValidity(t)}))}))}},{key:"disableSubmitButton",value:function(){this._formButton.disabled=!0}},{key:"enableValidation",value:function(){this._setEventListeners()}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();const i=r;function u(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var c=function(){function e(t,n){var o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderElements",value:function(){var e=this;this._items.forEach((function(t){e._renderer(t)}))}},{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"setCards",value:function(e){this._items=e}}])&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function a(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._escapeClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._escapeClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._escapeClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"_closeByOverlayPress",value:function(e){e.target===e.currentTarget&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){return e._closeByOverlayPress(t)})),this._popupCloseButton.addEventListener("click",(function(){e.close()}))}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function l(e){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l(e)}function p(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function f(){return f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var o=d(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(arguments.length<3?e:n):r.value}},f.apply(this,arguments)}function d(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=y(e)););return e}function _(e,t){return _=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},_(e,t)}function h(e,t){if(t&&("object"===l(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function y(e){return y=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},y(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_(e,t)}(u,e);var t,n,o,r,i=(o=u,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=y(o);if(r){var n=y(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return h(this,e)});function u(e){var t,n=e.popupSelector,o=e.submitCallBack;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,n))._submitCallBack=o,t._form=t._popup.querySelector(".popup__data"),t._inputs=Array.from(t._form.querySelectorAll(".popup__input")),t._submitButton=t._form.querySelector(".popup__delivery"),t}return t=u,(n=[{key:"_getInputValues",value:function(){var e={};return this._inputs.forEach((function(t){e[t.name]=t.value})),e}},{key:"close",value:function(){f(y(u.prototype),"close",this).call(this),this._form.reset()}},{key:"setEventListeners",value:function(){var e=this;f(y(u.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submitCallBack(e._getInputValues())}))}}])&&p(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(s);function v(e){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v(e)}function b(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function g(){return g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var o=k(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(arguments.length<3?e:n):r.value}},g.apply(this,arguments)}function k(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=C(e)););return e}function w(e,t){return w=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},w(e,t)}function E(e,t){if(t&&("object"===v(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function C(e){return C=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},C(e)}var S=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&w(e,t)}(u,e);var t,n,o,r,i=(o=u,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=C(o);if(r){var n=C(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return E(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._popupBigpicImage=t._popup.querySelector(".popup-bigpic__pic"),t._popupBigpicTitle=t._popup.querySelector(".popup-bigpic__title"),t}return t=u,(n=[{key:"open",value:function(e,t){this._popupBigpicTitle.textContent=e,this._popupBigpicImage.src=t,this._popupBigpicImage.alt=e,g(C(u.prototype),"open",this).call(this)}},{key:"close",value:function(){g(C(u.prototype),"close",this).call(this)}},{key:"setEventListeners",value:function(){g(C(u.prototype),"setEventListeners",this).call(this)}}])&&b(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(s);function O(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var j=function(){function e(t){var n=t.userName,o=t.userInfo;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=document.querySelector(n),this._userInfo=document.querySelector(o)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{username:this._userName.textContent,info:this._userInfo.textContent}}},{key:"setUserInfo",value:function(e){this._userName.textContent=e.name,this._userInfo.textContent=e.about}}])&&O(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),P={formSelector:".popup__data",inputSelector:".popup__input",submitButtonSelector:".popup__delivery",inactiveButtonClass:"popup__delivery_inactive",popupInputError:".popup__input-error",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active",templateItem:".element-template",cardButtonDelete:".element__trash",cardButtonLike:".element__like",cardButtonLikeActive:"element__like_active",cardList:".elements",cardTextItem:".element__title",cardImageItem:".element__image",cardPopup:".popup-bigpic",cardPopupImage:".popup-bigpic__pic",cardPopupTitle:".popup-bigpic__title",addCardForm:".popup-post__data",deleteCardPopup:".popup-delete__content"},I=document.querySelector(".profile__button-ed-self"),L=(document.querySelector(".element-template"),document.querySelector(".popup-profile__close"),document.querySelector(".popup__input_data_name")),B=document.querySelector(".popup__input_data_rank"),q=document.querySelector(".popup__data_one"),T=document.querySelector(".popup-post__data"),R=document.querySelector(".profile__button-add-self");function x(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}document.querySelector(".popup-post__input_data_name"),document.querySelector(".popup-post__input_data_rank");const U=function(){function e(t){var n=t.host,o=t.token;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._host=n,this._token=o}var t,n;return t=e,(n=[{key:"_getHeaders",value:function(){return{authorization:this._token}}},{key:"getCards",value:function(){return fetch("".concat(this._host,"/cards"),{headers:this._getHeaders()}).then((function(e){if(e.ok)return e.json();throw new Error("Ошибка при загрузке данных")}))}},{key:"addCard",value:function(e){return fetch("".concat(this._host,"/cards"),{method:"POST",headers:{authorization:"dfd0d591-2c36-49ee-a6dc-331afeedf1bc","Content-Type":"application/json"},body:JSON.stringify({name:e.name,link:e.link})}).then((function(e){if(e.ok)return e.json();throw new Error("Ошибка при загрузке данных")}))}},{key:"deleteCard",value:function(e){return fetch("".concat(this._host,"/cards/").concat(e),{method:"DELETE",headers:this._getHeaders()}).then((function(e){if(e.ok)return e.json();throw new Error("Ошибка при загрузке данных")}))}},{key:"getUserInfo",value:function(){return fetch("".concat(this._host,"/users/me"),{method:"GET",headers:this._getHeaders()}).then((function(e){if(e.ok)return e.json();throw new Error("Ошибка при загрузке данных")}))}},{key:"editUserInfo",value:function(e){return fetch("".concat(this._host,"/users/me"),{method:"PATCH",headers:{authorization:"dfd0d591-2c36-49ee-a6dc-331afeedf1bc","Content-Type":"application/json"},body:JSON.stringify({name:e.name,about:e.rank})}).then((function(e){if(e.ok)return e.json();throw new Error("Ошибка при загрузке данных")}))}}])&&x(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();var D=new S(".popup-bigpic");D.setEventListeners();var N=new m({popupSelector:".popup-profile",submitCallBack:function(e){J.editUserInfo(e).then((function(e){console.log(e),F.setUserInfo(e),N.close()})).catch((function(e){console.log("Error: ".concat(e))}))}});N.setEventListeners();var A=new m({popupSelector:".popup-post",submitCallBack:function(e){J.addCard(e).then((function(e){H.addItem(M(e)),A.close()})).catch((function(e){console.log("ошибочка вышла")}))}});A.setEventListeners();var V=new m({popupSelector:".popup_type_new-card",handleFormSubmit:function(e){V.loading(!0),J.addCard(e).then((function(e){cardsList.addItem(M(e)),V.close()})).catch((function(e){console.log("Ошибка: ".concat(e))})).finally((function(){V.loading(!1)}))}}),H=new c({renderer:function(e){H.addItem(M(e))}},".elements");new i(P,q).enableValidation();var z=new i(P,T);z.enableValidation();var F=new j({userName:".profile__name",userInfo:".profile__rank"}),J=new U({host:"https://mesto.nomoreparties.co/v1/cohort-47/",token:"dfd0d591-2c36-49ee-a6dc-331afeedf1bc","Content-Type":"application/json"});function G(e,t){D.open(e,t)}function M(e){return new n(P,e.name,e.link,G,".element-template").generateCard()}J.getUserInfo().then((function(e){F.setUserInfo(e),e.id})).catch((function(e){console.log("Ошибочка вышла")})),J.getCards().then((function(e){H.setCards(e),H.renderElements()})),I.addEventListener("click",(function(){var e=F.getUserInfo();L.value=e.username,B.value=e.info,N.open()})),R.addEventListener("click",(function(){z.disableSubmitButton(),A.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,